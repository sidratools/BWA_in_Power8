diff --git a/k8.cc b/k8.cc
index a1a9323..cf01285 100644
--- a/k8.cc
+++ b/k8.cc
@@ -14,8 +14,8 @@
  ************************************/
 
 // A V8 object can have multiple internal fields invisible to JS. The following 4 macros read and write these fields
-#define SAVE_PTR(_args, _index, _ptr)  (_args).This()->SetAlignedPointerInInternalField(_index, (void*)(_ptr))
-#define LOAD_PTR(_args, _index, _type) reinterpret_cast<_type>((_args).This()->GetAlignedPointerFromInternalField(_index))
+#define SAVE_PTR(_args, _index, _ptr)  (_args).This()->SetPointerInInternalField(_index, (void*)(_ptr))
+#define LOAD_PTR(_args, _index, _type) reinterpret_cast<_type>((_args).This()->GetPointerFromInternalField(_index))
 #define SAVE_VALUE(_args, _index, _val) (_args).This()->SetInternalField(_index, _val)
 #define LOAD_VALUE(_args, _index) (_args).This()->GetInternalField(_index)
 
@@ -313,7 +313,7 @@ JS_METHOD(k8_bytes_set, args)
 		else if (a->eta == v8::kExternalUnsignedShortArray) for (i = 0; i < array->Length(); ++i) ((uint16_t*)a->a)[pos + i] = array->Get(v8::Integer::New(i))->Uint32Value();
 	} else if (args[0]->IsObject()) {
 		v8::Handle<v8::Object> b = v8::Handle<v8::Object>::Cast(args[0]); // TODO: check b is a 'Bytes' instance
-		kvec8_t *a2 = reinterpret_cast<kvec8_t*>(b->GetAlignedPointerFromInternalField(0));
+		kvec8_t *a2 = reinterpret_cast<kvec8_t*>(b->GetPointerFromInternalField(0));
 		_extend_vec_(a2->n);
 		memcpy(a->a + (pos << a->tshift), a2->a, a2->n);
 	}
@@ -539,7 +539,7 @@ JS_METHOD(k8_file_read, args) // File::read(), read(buf, offset, length)
 	} else if (args.Length() == 3 && args[0]->IsObject() && args[1]->IsUint32() && args[2]->IsUint32()) { // read(buf, offset, length)
 		long off = args[1]->Int32Value(), len = args[2]->Int32Value();
 		v8::Handle<v8::Object> b = v8::Handle<v8::Object>::Cast(args[0]); // TODO: check b is a 'Bytes' instance
-		kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetAlignedPointerFromInternalField(0));
+		kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetPointerFromInternalField(0));
 		if (len + off > kv->m) kv_recapacity(kv, len + off);
 		len = ks_read(fp, ks, kv->a + off, len, gzread);
 		if (len + off > kv->n) {
@@ -563,7 +563,7 @@ JS_METHOD(k8_file_write, args) // File::write(str). Write $str and return the nu
 		len = fwrite(*vbuf, 1, vbuf.length(), fp);
 	} else if (args[0]->IsObject()) {
 		v8::Handle<v8::Object> b = v8::Handle<v8::Object>::Cast(args[0]); // TODO: check b is a 'Bytes' instance
-		kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetAlignedPointerFromInternalField(0));
+		kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetPointerFromInternalField(0));
 		len = fwrite(kv->a, 1, kv->n, fp);
 	}
 	return scope.Close(v8::Integer::New(len));
@@ -577,7 +577,7 @@ JS_METHOD(k8_file_readline, args) // see iStream::readline(sep=line) for details
 	if (fpr == 0) return JS_ERROR("file is not open for read");
 	if (!args.Length() || !args[0]->IsObject()) return v8::Null(); // TODO: when there are no parameters, skip a line
 	v8::Handle<v8::Object> b = v8::Handle<v8::Object>::Cast(args[0]); // TODO: check b is a 'Bytes' instance
-	kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetAlignedPointerFromInternalField(0));
+	kvec8_t *kv = reinterpret_cast<kvec8_t*>(b->GetPointerFromInternalField(0));
 	int dret, ret, sep = KS_SEP_LINE;
 	if (args.Length() > 1) { // by default, the delimitor is new line
 		if (args[1]->IsString()) { // if 1st argument is a string, set the delimitor to the 1st charactor of the string
